import java.io.*;
import java_cup.runtime.*;

action code
{:
    public static String repeat(int count) {
        return repeat(count, " ");
    }
    public void Print(Tree tree, int depth) {
        System.out.println(repeat(depth) + tree.toString());
        Tree[] children = tree.getChildren();
        if (children != null) {
            for (Tree child : childre) { 
                Print(child, depth + 1);
            }
        }
    }

:}

parser code
{:
    public void syntax_error(Symbol s){
        report_error("Error sintactico en linea: " + (s.left + 1) + " y columna: " + (s.right + 1) + "\n El simbolo fue: ", sym.terminalNames[s.sym]);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("Error sintactico fatal: " + s + "\n", null);
    }

:}

terminal COMA, PERIOD;
terminal NOT, AND, OR;
terminal IF, THEN, ELSE, ELSEIF;
terminal DO, LOOP, WHILE;
terminal FOR, TO, NEXT;
terminal MOD;
terminal READLINE, PRINT;
terminal SUB, FUNCTION;
terminal DIM, AS, EQUALTO;
terminal OPENPARENTHESIS, CLOSEPARENTHESIS;
terminal ENDOFLINE;
terminal TRUE, FALSE;
terminal MAIN;
terminal END;
terminal String STRING, ID, TYPE, INTEGER, CHAR;
terminal String RELATIONALOPERATOR, MULTIPLICATIONOPERATOR, ADDITIONOPERATOR;

non terminal Program;
non terminal ModuleListClass PreModuleList, ModuleList;
non terminal FunctionHelper Function;
non terminal ProcedureHelper Procedure;
non terminal ArgumentHelper[] PreArgumentList, ArgumentList;
non terminal ArgumentHelper Argument;
non terminal StatementClass[] PreStatementList, StatementList;
non terminal StatementClass Statement, Loop, IO;
non terminal DeclarationStatement Declaration;
non terminal AssignmentStatement Assignment;
non terminal Expression[] ExpressionList;
non terminal Expression Expression;
non terminal FunctionCallStatement FunctionCall;
non terminal ConditionalStatement Conditional, ConditionalElseIf;
non terminal StatementClass[] ConditionalElse;
non terminal ForStatement For;
non terminal WhileStatement While;

precedence left AND, OR;
precedence left RELATIONALOPERATOR;
precedence left ADDITIONOPERATOR;
precedence left MULTIPLICATIONOPERATOR, MOD;
precedence left NOT;


start with Program;

Program ::= PreModuleList:list {: Print(list, 0) :}
;

PreModuleList       ::= SUB MAIN OPENPARENTHESIS CLOSEPARENTHESIS ENDOFLINE PreStatementList END SUB ENDOFLINE ModuleList
                    | Function ENDOFLINE PreModuleList
                    | Procedure ENDOFLINE PreModuleList
                    | Declaration ENDOFLINE PreModuleList
;

ModuleList          ::= Function ENDOFLINE ModuleList
                    | Procedure ENDOFLINE ModuleList
                    | Declaration ENDOFLINE ModuleList
                    |
;

Function            ::= FUNCTION ID OPENPARENTHESIS ArgumentList CLOSEPARENTHESIS AS TYPE ENDOFLINE PreStatementList END FUNCTION
                    | FUNCTION ID AS TYPE ENDOFLINE PreStatementList END FUNCTION
;

Procedure           ::= SUB ID OPENPARENTHESIS ArgumentList CLOSEPARENTHESIS ENDOFLINE PreStatementList END SUB
                    | SUB ID ENDOFLINE PreStatementList END SUB
;

PreArgumentList     ::= ArgumentList 
                    |
;

ArgumentList        ::= Argument COMA ArgumentList 
                    | Argument 
;

Argument            ::= ID AS TYPE
;

PreStatementList    ::= StatementList
                    |
;

StatementList       ::= Statement ENDOFLINE StatementList 
                    | Statement ENDOFLINE
;

FunctionCall        ::= ID OPENPARENTHESIS ExpressionList CLOSEPARENTHESIS
                    | ID OPENPARENTHESIS CLOSEPARENTHESIS
;

Statement           ::= Declaration
                    | Assignment
                    | Conditional
                    | Loop
                    | IO
                    | FunctionCall
                    |
;

Declaration         ::= DIM ID AS TYPE
                    | DIM ID AS TYPE EQUALTO Expression
;

Assignment          ::= ID EQUALTO Expression
;

IO                  ::= PRINT Expression
                    | READLINE ID
;

Conditional         ::= IF Expression THEN ENDOFLINE PreStatementList ConditionalElseIf ConditionalElse END IF
                    | IF Expression THEN ENDOFLINE PreStatementList ConditionalElseIf END IF
                    | IF Expression THEN ENDOFLINE PreStatementList ConditionalElse END IF
                    | IF Expression THEN ENDOFLINE PreStatementList END IF
;

ConditionalElseIf   ::= ELSEIF Expression THEN ENDOFLINE PreStatementList ConditionalElseIf
                    | ELSEIF Expression THEN ENDOFLINE PreStatementList
;

ConditionalElse     ::= ELSE ENDOFLINE PreStatementList
;

Loop                ::= For 
                    | While
;

For                 ::= FOR Assignment TO INTEGER ENDOFLINE PreStatementList NEXT
;

While               ::= DO ENDOFLINE PreStatementList LOOP WHILE Expression
;

ExpressionList      ::= Expression COMA ExpressionList
                    | Expression
;

Expression          ::= Expression ADDITIONOPERATOR Expression
                    | Expression MULTIPLICATIONOPERATOR Expression
                    | Expression RELATIONALOPERATOR Expression
                    | Expression AND Expression
                    | Expression OR Expression
                    | NOT Expression
                    | ID
                    | INTEGER
                    | STRING
                    | CHAR
                    | ID OPENPARENTHESIS ExpressionList CLOSEPARENTHESIS
                    | ID OPENPARENTHESIS CLOSEPARENTHESIS
                    | TRUE
                    | FALSE
                    | Expression MOD Expression
;